import time
import requests
import itertools
import logging

class ApiServices:
    def __init__(self, api_keys, rate_limit=5):
        self.api_keys = itertools.cycle(api_keys)  # ‚úÖ ‡πÉ‡∏ä‡πâ itertools.cycle ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô API Key
        self.rate_limit = rate_limit
        self.api_call_tracker = {key: [] for key in api_keys}  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ API Key
        self.current_key = next(self.api_keys)  # ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà Key ‡πÅ‡∏£‡∏Å

    def _get_available_key(self):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Key ‡πÑ‡∏´‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        current_time = time.time()
        logging.info(f"üîÑ Checking available API Key...")

        for key in self.api_call_tracker:
            timestamps = self.api_call_tracker[key]
            self.api_call_tracker[key] = [t for t in timestamps if current_time - t < 60]  # ‚úÖ ‡∏•‡∏ö timestamp ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏ß‡∏¥

            if len(self.api_call_tracker[key]) < self.rate_limit:
                logging.info(f"‚úÖ API Key {key} is available ({len(self.api_call_tracker[key])}/{self.rate_limit} calls used)")
                return key  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Key ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Key ‡πÉ‡∏î‡∏ß‡πà‡∏≤‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 60 ‡∏ß‡∏¥
        wait_time = 60 - (current_time - min(min(self.api_call_tracker.values(), key=lambda x: x[0]) or [0]))
        logging.warning(f"‚è≥ All API Keys reached limit! Waiting {wait_time:.2f} seconds...")
        time.sleep(wait_time)
        return self._get_available_key()  # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠

    def fetch_api(self, full_path_url, params=None, max_retries=3):
        """‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ Too Many Requests (429)"""
        retries = 0
        while retries < max_retries:
            self.current_key = self._get_available_key()
            params = params or {}
            params["key"] = self.current_key
            url = full_path_url

            try:
                response = requests.get(url, params=params)
                logging.info(f"üåê API Request: {url} | Status: {response.status_code}")

                if response.status_code == 429:
                    wait_time = 60  # ‚úÖ ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô Rate Limit
                    logging.warning(f"‚è≥ API Key {self.current_key} reached limit! Waiting {wait_time} seconds...")
                    time.sleep(wait_time)
                    retries += 1
                    continue  # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠

                response.raise_for_status()
                self.api_call_tracker[self.current_key].append(time.time())  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Timestamp API Key

                return response.json()

            except requests.exceptions.RequestException as e:
                logging.error(f"‚ùå API Request failed: {e}")
                return None
        return None
