import time
import itertools
import requests
import logging
import json
from datetime import datetime

class ApiServices:
    def __init__(self, api_keys, rate_limit=5, reset_time=60):
        """
        ‚úÖ ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Key ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        :param api_keys: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ API Keys ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        :param rate_limit: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠ Key
        :param reset_time: ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ API Key ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        """
        self.api_keys = itertools.cycle(api_keys)  # üîπ ‡∏´‡∏°‡∏∏‡∏ô API Keys ‡∏ß‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
        self.rate_limit = rate_limit
        self.reset_time = reset_time

        # üîπ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API Key ‡πÅ‡∏•‡∏∞ Timestamp
        self.api_call_tracker = [{
            "key": key,
            "ts": {}                # üîπ ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ API
        } for key in api_keys]

    def get_available_key(self):
        """‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å API Key ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î Rate Limit"""
        current_time = time.time()

        for entry in self.api_call_tracker:
            key = entry["key"]

            # ‚úÖ ‡∏•‡∏ö timestamp ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô RESET_TIME
            entry["ts"] = {k: v for k, v in entry["ts"].items() 
                           if current_time - datetime.strptime(v, "%Y-%m-%d %H:%M:%S").timestamp() < self.reset_time}

            # ‚úÖ ‡∏ñ‡πâ‡∏≤ Key ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            if len(entry["ts"]) < self.rate_limit:
                logging.info(f"‚úÖ API Key {key} ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ({len(entry['ts'])}/{self.rate_limit} calls used)")
                return entry  # üîπ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Entry ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ API ‡πÑ‡∏î‡πâ

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å API Key ‡∏´‡∏°‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        logging.warning(f"‚è≥ ‡∏ó‡∏∏‡∏Å API Key ‡∏´‡∏°‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤! ‡∏£‡∏≠ {self.reset_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(self.reset_time)
        return self.get_available_key()

    def fetch_api(self, url, params=None, max_retries=3):
        """‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Rate Limit"""
        retries = 0

        while retries < max_retries:
            entry = self.get_available_key()
            current_key = entry["key"]
            params = params or {}
            params["key"] = current_key

            try:
                response = requests.get(url, params=params)
                logging.info(f"üåê API Request: {url} | Status: {response.status_code}")

                if response.status_code == 429:
                    logging.warning(f"‚è≥ API Key {current_key} ‡∏ï‡∏¥‡∏î Rate Limit! ‡∏£‡∏≠ {self.reset_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                    time.sleep(self.reset_time)  # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ API Key ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                    retries += 1
                    continue  # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

                response.raise_for_status()

                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Timestamp ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API
                now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ts_index = len(entry["ts"]) + 1
                entry["ts"][ts_index] = now_str

                return response.json()

            except requests.exceptions.RequestException as e:
                logging.error(f"‚ùå API Request ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                return None

        return None

    def get_api_usage(self):
        """‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API Key ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON"""
        return json.dumps(self.api_call_tracker, indent=4)


# # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡∏Ç‡∏≠‡∏á APIManager
# API_KEYS = ["API_KEY_1", "API_KEY_2"]  # üîπ ‡πÉ‡∏™‡πà API Keys ‡∏ó‡∏µ‡πà‡∏°‡∏µ
# api_manager = APIManager(API_KEYS, rate_limit=5, reset_time=60)

# # ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
# API_URL = "http://api.airvisual.com/v2/cities"

# for _ in range(10):  # üîπ ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
#     result = api_manager.fetch_api(API_URL, params={"state": "Bangkok", "country": "Thailand"})
#     print(result)

# # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
# print(api_manager.get_api_usage())
