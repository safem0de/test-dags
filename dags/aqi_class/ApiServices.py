import itertools
import time
import requests
from datetime import datetime

class ApiService:
    RESET_TIME = 60  # ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ API Key ‡∏ï‡∏¥‡∏î Rate Limit
    RATE_LIMIT = 5  # üîπ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà API Key ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î Rate Limit

    def __init__(self, api_keys):
        self.api_keys = itertools.cycle(api_keys)  # ‚úÖ ‡∏´‡∏°‡∏∏‡∏ô API Key ‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
        self.api_usage = {key: [] for key in api_keys}  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timestamp ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ API Key
        self.current_key = next(self.api_keys)  # ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ API Key ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    def _get_valid_api_key(self):
        """üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å API Key ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"""
        current_time = time.time()

        for _ in range(len(self.api_usage)):  # ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ API Key ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
            timestamps = self.api_usage[self.current_key]
            # üîπ ‡∏•‡∏ö timestamp ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏Å‡∏¥‡∏ô RESET_TIME ‡∏≠‡∏≠‡∏Å
            self.api_usage[self.current_key] = [ts for ts in timestamps if current_time - ts < self.RESET_TIME]

            if len(self.api_usage[self.current_key]) < self.RATE_LIMIT:
                return self.current_key  # ‚úÖ ‡πÉ‡∏ä‡πâ API Key ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
            else:
                print(f"‚è≥ API Key {self.current_key} ‡∏ï‡∏¥‡∏î Rate Limit! ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API Key ‡∏≠‡∏∑‡πà‡∏ô...")
                self.current_key = next(self.api_keys)  # üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API Key ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ! ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(self.RESET_TIME)  # ‚ùó ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        return self._get_valid_api_key()

    def fetch_api(self, url:str ,params:dict = None):
        """üåç ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Rate Limit & Error"""
        while True:
            self.current_key = self._get_valid_api_key()  # ‚úÖ ‡πÉ‡∏ä‡πâ API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ

            print(f"üåê ‡πÉ‡∏ä‡πâ API Key: {self.current_key} | Request: {url}")
            params["key"] = self.current_key
            response = requests.get(url, params)

            if response.status_code == 200:
                print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Data: {response.json()}")
                self.api_usage[self.current_key].append(time.time())  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timestamp
                return response.json()
            elif response.status_code == 400:
                print(f"‚ùå API Error 400: Bad Request! ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
                return None
            elif response.status_code == 429:
                print(f"‚è≥ API Key {self.current_key} ‡∏ï‡∏¥‡∏î Rate Limit! ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API Key ‡∏≠‡∏∑‡πà‡∏ô...")
                self.current_key = next(self.api_keys)  # üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô API Key ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            else:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                return None
