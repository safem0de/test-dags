import time
import itertools
import requests
import logging
import json
from datetime import datetime

class ApiServices:
    def __init__(self, api_keys:list, rate_limit:int=5, reset_time:int=60):
        """
        ‚úÖ ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Key ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        :param api_keys: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ API Keys ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        :param rate_limit: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠ Key
        :param reset_time: ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ API Key ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        """
        self.keys = api_keys
        self.api_keys = itertools.cycle(api_keys)  # üîπ ‡∏´‡∏°‡∏∏‡∏ô API Keys ‡∏ß‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
        self.rate_limit = rate_limit
        self.reset_time = reset_time
        self.api_usage = {key: [] for key in api_keys}

        self.current_key = next(api_keys)

    def get_available_key(self):
        current_time = time.time()

        for _ in range(len(self.keys)):  # ‚úÖ ‡∏•‡∏≠‡∏á‡∏™‡∏•‡∏±‡∏ö API Key ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            timestamps = self.api_usage[current_key]
            # ‡∏•‡∏ö timestamp ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô RESET_TIME ‡∏≠‡∏≠‡∏Å
            self.api_usage[current_key] = [ts for ts in timestamps if current_time - ts < self.reset_time]

            if len(self.api_usage[current_key]) < 5:
                return current_key
            else:
                print(f"‚è≥ API Key {current_key} ‡∏ï‡∏¥‡∏î Rate Limit! ‡∏•‡∏≠‡∏á‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API Key ‡∏≠‡∏∑‡πà‡∏ô...")
                current_key = next(self.keys)  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API Key ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ! ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        time.sleep(60)  # ‚ùó ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        return self.get_available_key()

    def fetch_api(self, url, params=None, max_retries=3):
        """‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Rate Limit"""
        retries = 0
        wait_time = self.reset_time/max_retries

        while retries < max_retries:
            entry = self.get_available_key()
            current_key = entry["key"]
            params = params or {}
            params["key"] = current_key

            try:
                response = requests.get(url, params=params)
                logging.info(f"üåê API Request: {url} | Status: {response.status_code}")

                if response.status_code == 429:
                    logging.warning(f"‚è≥ API Key {current_key} ‡∏ï‡∏¥‡∏î Rate Limit! ‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                    time.sleep(wait_time)  # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ API Key ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                    retries += 1
                    continue  # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

                response.raise_for_status()

                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Timestamp ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API
                now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ts_index = len(entry["ts"]) + 1
                entry["ts"][ts_index] = now_str

                return response.json()

            except requests.exceptions.RequestException as e:
                logging.error(f"‚ùå API Request ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                return None

        return None