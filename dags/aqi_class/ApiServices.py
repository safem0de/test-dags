import time
import requests
import itertools
import logging

class ApiServices:
    def __init__(self, api_keys, rate_limit=5):
        self.api_keys = itertools.cycle(api_keys)  # ‚úÖ ‡πÉ‡∏ä‡πâ itertools.cycle ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏∏‡∏ô API Key
        self.rate_limit = rate_limit
        self.api_call_tracker = {key: [] for key in api_keys}  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ API Key
        self.current_key = next(self.api_keys)  # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    def _get_available_key(self):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î Rate Limit"""
        current_time = time.time()
        logging.info(f"üîÑ Checking available API Key...")

        # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä timestamp ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        for key in self.api_call_tracker:
            self.api_call_tracker[key] = [t for t in self.api_call_tracker[key] if current_time - t < 60]

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å API Key ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        for _ in range(len(self.api_call_tracker)):
            key = self.current_key  # ‡πÉ‡∏ä‡πâ API Key ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if len(self.api_call_tracker[key]) + 1 <= self.rate_limit:  # ‚úÖ +1 API Call ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Key ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
                logging.info(f"‚úÖ API Key {key} is available ({len(self.api_call_tracker[key])+1}/{self.rate_limit} calls used)")
                return key

            # ‚úÖ ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ API Key ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            self.current_key = next(self.api_keys)

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Key ‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        next_available_time = min(min(self.api_call_tracker.values(), key=lambda x: x[0]) or [current_time]) + 60
        wait_time = max(0, next_available_time - current_time)
        logging.warning(f"‚è≥ All API Keys reached limit! Waiting {wait_time:.2f} seconds...")
        time.sleep(wait_time)
        return self._get_available_key()  # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠

    def fetch_api(self, full_path_url, params=None, max_retries=3):
        """‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Rate Limit"""
        retries = 0
        while retries < max_retries:
            current_key = self._get_available_key()
            params = params or {}
            params["key"] = current_key
            url = full_path_url

            try:
                response = requests.get(url, params=params)
                logging.info(f"üåê API Request: {url} | Status: {response.status_code}")

                if response.status_code == 429:
                    logging.warning(f"‚è≥ API Key {current_key} reached limit! Switching API Key...")
                    self.current_key = next(self.api_keys)  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô API Key ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    retries += 1
                    continue  # ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö Key ‡∏≠‡∏∑‡πà‡∏ô

                response.raise_for_status()
                self.api_call_tracker[current_key].append(time.time())  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Timestamp API Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ

                return response.json()

            except requests.exceptions.RequestException as e:
                logging.error(f"‚ùå API Request failed: {e}")
                return None
        return None
