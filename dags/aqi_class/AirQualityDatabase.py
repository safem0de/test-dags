import csv
import json
import os
from dags.aqi_class.ApiServices import ApiServices
from dags.aqi_class.CommonServices import CommonServices

class AirQualityDatabase:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Database, API ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""

    def __init__(self, conn_id: str, api_url: str, api_keys: list, dag_file_path: str):
        self.conn_id = conn_id
        self.api_url = api_url
        self.api_keys = api_keys
        self.dag_file_path = dag_file_path
        self.apis = ApiServices(self.api_keys)
        self.cms = CommonServices()


    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AQI ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    def create_aqi_database(self):
        self.database_name = "aqi_database"
        self.cms.create_database(self.conn_id, self.database_name)


    # # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á location
    # def create_aqi_table_location(self):
    #     print("üî∞ Start create table location")
    #     sql = """
    #         CREATE TABLE IF NOT EXISTS location (
    #             location_id SERIAL PRIMARY KEY,
    #             city VARCHAR(255) NOT NULL,
    #             state VARCHAR(255) NOT NULL,
    #             country VARCHAR(50) DEFAULT 'Thailand',
    #             latitude DECIMAL(10, 6),
    #             longitude DECIMAL(10, 6),
    #             region VARCHAR(255) NOT NULL,
    #             UNIQUE (city, state, country)
    #         );
    #     """
    #     self.cms.execute_sql(
    #         conn_id=self.conn_id, 
    #         database_name="aqi_database", 
    #         sql_statement=sql
    #         )


    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á aqi_data
    def create_table_aqi_rawdata(self):
        print("üî∞ Start create table air_quality_raw")
        sql = """
            CREATE TABLE air_quality_raw (
                aqi_id SERIAL PRIMARY KEY,
                city VARCHAR(255) NOT NULL,
                state VARCHAR(255) NOT NULL,
                region VARCHAR(255) NOT NULL,
                country VARCHAR(50) DEFAULT 'Thailand',
                latitude DECIMAL(10,6),
                longitude DECIMAL(10,6),
                timestamp TIMESTAMP NOT NULL,
                aqius INT NOT NULL,
                mainus VARCHAR(10),
                aqicn INT,
                maincn VARCHAR(10),
                temperature DECIMAL(5,2),
                pressure INT,
                humidity INT,
                wind_speed DECIMAL(5,2),
                wind_direction INT
            );
        """
        self.cms.execute_sql(
            conn_id=self.conn_id, 
            database_name="aqi_database", 
            sql_statement=sql
            )


    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• state (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î) ‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
    def get_state_data(self, filename="state_master.json"):
        file_path = os.path.join(self.dag_file_path, filename)

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if os.path.exists(file_path):
            print(f"‚úÖ File '{file_path}' already exists. Skipping API call.")
            return

        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà API key ‡πÄ‡∏î‡πä‡∏¢‡∏ß fetch api ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ
        params = {
            "country": "thailand",
        }

        endpoint="v2/states"
        full_url = f"{self.api_url}{endpoint}"

        data = self.apis.fetch_api(url=full_url, params=params)
        print(data)

        self.cms.create_file_if_not_exist(file_path=file_path, data=data)


    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• city (‡∏≠‡∏≥‡πÄ‡∏†‡∏≠) ‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å API
    def get_city_data(self, state_name):
        filename = f"city_master_{state_name}.json"
        file_path = os.path.join(self.dag_file_path, filename)

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if os.path.exists(file_path):
            print(f"‚úÖ File '{file_path}' already exists. Skipping API call.")
            return

        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà API key ‡πÄ‡∏î‡πä‡∏¢‡∏ß fetch api ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ
        params = {
            "state": state_name,
            "country": "thailand"
        }

        endpoint="v2/cities"
        full_url = f"{self.api_url}{endpoint}"

        data = self.apis.fetch_api(url=full_url, params=params)
        print(data)

        self.cms.create_file_if_not_exist(file_path=file_path, data=data)


    def generate_state_city_region_csv(self, dag_file_path, state_master, output_filename):
        """
        ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `state_master.json` ‡πÅ‡∏•‡∏∞ `city_master_xxx.json`
        ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö state, city
        """

        state_file = os.path.join(dag_file_path, state_master)
        output_file = os.path.join(dag_file_path, output_filename)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå state_master.json ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if not os.path.exists(state_file):
            print(f"‚ùå Error: File '{state_file}' not found.")
            return

        # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• state_master.json
        with open(state_file, "r", encoding="utf-8") as f:
            state_data = json.load(f)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
        if "data" not in state_data or not isinstance(state_data["data"], list):
            print(f"‚ùå Error: Invalid JSON structure in '{state_file}'.")
            return

        # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• state, city
        state_city_list = []

        # ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å city_master_xxx.json
        for state_entry in state_data["data"]:
            state_name = state_entry["state"]
            region_name = self.cms.map_region(state_name)  # ‚úÖ ‡∏´‡∏≤ region ‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
            city_file = os.path.join(dag_file_path, f"city_master_{state_name}.json")

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå city_master_xxx.json ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if os.path.exists(city_file):
                with open(city_file, "r", encoding="utf-8") as f:
                    city_data = json.load(f)

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
                if "data" in city_data and isinstance(city_data["data"], list):
                    cities = [city_entry["city"] for city_entry in city_data["data"]]
                else:
                    cities = []
            else:
                print(f"‚ö†Ô∏è Warning: File '{city_file}' not found. Skipping...")
                cities = []

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• state, city ‡∏•‡∏á‡πÉ‡∏ô list
            for city in cities:
                state_city_list.append([state_name, city, region_name])

        # ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
        with open(output_file, mode="w", newline="", encoding="utf-8") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["state", "city", "region"])    # ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Header
            writer.writerows(state_city_list)               # ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        print(f"‚úÖ File saved: {output_file}")


    def insert_hourly_job(self, master_data, data):
        print("üî∞ Start insert table air_quality_raw")

        try:
            state, city, region = master_data

            # ‚úÖ Extract ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            pollution = data.get("data", {}).get("current", {}).get("pollution", {})
            weather = data.get("data", {}).get("current", {}).get("weather", {})

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            aqius = pollution.get("aqius", None)
            mainus = pollution.get("mainus", None)
            aqicn = pollution.get("aqicn", None)
            maincn = pollution.get("maincn", None)
            temperature = weather.get("tp", None)
            pressure = weather.get("pr", None)
            humidity = weather.get("hu", None)
            wind_speed = weather.get("ws", None)
            wind_direction = weather.get("wd", None)

            # ‚úÖ SQL Query
            sql = """
                INSERT INTO air_quality_raw 
                (location_id, timestamp, aqius, mainus, aqicn, maincn, temperature, pressure, humidity, wind_speed, wind_direction)
                VALUES (
                    (SELECT COALESCE((SELECT location_id FROM location WHERE city = %s AND state = %s LIMIT 1), 0)),
                    NOW(), %s, %s, %s, %s, %s, %s, %s, %s, %s
                );
            """

            # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Params
            params = (
                city, state, aqius, mainus, aqicn, maincn, 
                temperature, pressure, humidity, wind_speed, wind_direction
            )

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.cms.execute_sql(
                conn_id=self.conn_id, 
                database_name="aqi_database", 
                sql_statement=sql,
                parameters=params
            )

            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AQI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {city}, {state}, {region}")

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Insert AQI Data: {str(e)}")